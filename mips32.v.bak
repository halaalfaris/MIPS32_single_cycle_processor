module mips32 (clk,reset);

input reset;
input clk; 

adder4 add(pc, add_out);


PC_reg pc(clk, reset,add_out,pc);


IR inst_mem(pc, instruction);	 

control_unit cu(instruction, reg_dest, branch, jump, mem_read, mem_to_reg, aluop, mem_write, alusrc, reg_write);

extract_reg_adrr extract(instruction, addr1,addr2);

write_reg_MUX regdest(reg_dest, instruction,write_address);

register_file rf(addr1, addr2, write_address, read_data_1, read_data_2, write_data, reg_write, clk, reset);

sign_extension signedex(instruction, sign_out);

mux2to1 alu_source(alusrc, read_data_2, sign_out, alu_B );

aluCON alu_control (aluop, instruction, alu_sel);


alu AlU(alu_sel,read_data_1,alu_B,alu_out,zero_f,ov_f);

data_memory Dm (alu_out, read_data_2, DM_out, clk, reset, mem_read, mem_write);

mux2to1 memory_reg(mem_to_reg, alu_out, DM_out, write_data);



endmodule 
/*
module extract_reg_adrr(
input wire [31:0] IR,
output wire [4:0] addr1,
output wire [4:0] addr2
);

module sign_extension (IR, sign_out);

module register_file (read_addr_1, read_addr_2, write_addr, read_data_1, read_data_2, write_data, reg_write, clk, reset);


module PC_reg(
    input wire clock,     // Clock input
    input wire reset,     // Reset input (active high)
    input wire [31:0] data_in1, // Data input (8-bit wide)
    output reg [7:0] data_out // Data output (8-bit wide)
);

module mux2to1 (
    input wire select1,     // Select signal
    input wire [31:0] data1,// 32-bit input data
	 input wire [31:0] data2,// 32-bit input data
    output wire [31:0] outputdata // 32-bit output
);

module IR(
    input wire [7:0] address,   // 8-bit address input
    output reg [31:0] data    // 32-bit data output
);

module data_memory (addr, write_data, read_data, clk, reset, mem_read, mem_write);



module control_unit (IR, reg_dest, branch, jump, mem_read, mem_to_reg, aluop, mem_write, alusrc, reg_write);


module aluCON (aluop, IR, out_to_alu);


module alu (
input [3:0]aluCON,
input [31:0] In1,
input [31:0] In2,
output [31:0] result,
output zero,
output ov);


module adder4 (A, add_out);

module write_reg_MUX (
    input wire select1,     // Select signal
    input wire [31:0] data,// 32-bit input data
    output wire [4:0] outputdata // 7-bit output
);
*/
